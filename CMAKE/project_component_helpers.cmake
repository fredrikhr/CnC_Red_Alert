function(set_project_component_name)
  cmake_path(GET CMAKE_CURRENT_SOURCE_DIR FILENAME PROJECT_COMPONENT_NAME)
  return(PROPAGATE PROJECT_COMPONENT_NAME)
endfunction()

macro(project_component PROJECT_COMPONENT_DEFAULT_TARGET_TYPE)
  get_property(PROJECT_ENABLED_LANGUAGES GLOBAL PROPERTY ENABLED_LANGUAGES)
  foreach(PROJECT_ENABLED_LANGUAGE ${PROJECT_ENABLED_LANGUAGES})
    file(GLOB "PROJECT_COMPONENT_${PROJECT_ENABLED_LANGUAGE}_SOURCE_FILES"
      RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
      CONFIGURE_DEPENDS
      ${CMAKE_${PROJECT_ENABLED_LANGUAGE}_SOURCE_FILE_LOCAL_GLOBS}
    )
    list(APPEND PROJECT_COMPONENT_ANY_LANG_SOURCE_FILES
      ${PROJECT_COMPONENT_${PROJECT_ENABLED_LANGUAGE}_SOURCE_FILES}
    )
  endforeach()
  file(GLOB PROJECT_COMPONENT_ANY_LANG_IGNORE_LOCAL_FILES
    ${CMAKE_ANY_LANG_IGNORE_LOCAL_GLOBS}
  )

  if(${PROJECT_COMPONENT_DEFAULT_TARGET_TYPE} STREQUAL "EXECUTABLE")
    add_executable(${PROJECT_COMPONENT_NAME}
      ${PROJECT_COMPONENT_ANY_LANG_SOURCE_FILES}
    )
  elseif(${PROJECT_COMPONENT_DEFAULT_TARGET_TYPE} MATCHES "^(STATIC|OBJECT|SHARED)_LIBRARY$")
    add_library(${PROJECT_COMPONENT_NAME} ${CMAKE_MATCH_1}
      ${PROJECT_COMPONENT_ANY_LANG_SOURCE_FILES}
    )
  endif()
  target_sources(${PROJECT_COMPONENT_NAME}
    PRIVATE FILE_SET local_headers TYPE HEADERS
    FILES ${PROJECT_COMPONENT_ANY_LANG_IGNORE_LOCAL_FILES}
  )
  set_source_files_properties(${PROJECT_COMPONENT_ASM_MASM_SOURCE_FILES}
    PROPERTIES LANGUAGE ASM_MASM
  )
endmacro()
