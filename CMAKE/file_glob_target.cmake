function(add_file_glob_target
  PROJECT_COMPONENT_TARGET_NAME
  PROJECT_COMPONENT_TARGET_TYPE
)
  if(PROJECT_COMPONENT_TARGET_NAME STREQUAL DEFAULT)
    if(PROJECT_COMPONENT_SUBDIR_DEFAULT_TARGET_NAME)
      set(PROJECT_COMPONENT_TARGET_NAME
        ${PROJECT_COMPONENT_SUBDIR_DEFAULT_TARGET_NAME}
      )
    else()
      set(PROJECT_COMPONENT_TARGET_NAME ${PROJECT_COMPONENT_NAME})
    endif()
  endif()

  foreach(CMAKE_ENABLED_LANGUAGE IN LISTS CMAKE_ENABLED_LANGUAGES)
    file(GLOB "PROJECT_COMPONENT_TARGET_${CMAKE_ENABLED_LANGUAGE}_SOURCE_FILES"
      CONFIGURE_DEPENDS ${CMAKE_${CMAKE_ENABLED_LANGUAGE}_SOURCE_FILE_LOCAL_GLOBS}
    )
    list(APPEND PROJECT_COMPONENT_TARGET_ANY_LANG_SOURCE_FILES
      ${PROJECT_COMPONENT_TARGET_${CMAKE_ENABLED_LANGUAGE}_SOURCE_FILES}
    )
  endforeach()
  file(GLOB PROJECT_COMPONENT_TARGET_ANY_LANG_IGNORE_FILES
    ${CMAKE_ANY_LANG_IGNORE_LOCAL_GLOBS}
  )

  if(PROJECT_COMPONENT_TARGET_TYPE STREQUAL "EXECUTABLE")
    add_executable(${PROJECT_COMPONENT_TARGET_NAME}
      ${PROJECT_COMPONENT_TARGET_ANY_LANG_SOURCE_FILES}
    )
  elseif(PROJECT_COMPONENT_TARGET_TYPE MATCHES "^(STATIC|OBJECT|SHARED)_LIBRARY$")
    add_library(${PROJECT_COMPONENT_TARGET_NAME} ${CMAKE_MATCH_1}
      ${PROJECT_COMPONENT_TARGET_ANY_LANG_SOURCE_FILES}
    )
  endif()
  target_include_directories(${PROJECT_COMPONENT_TARGET_NAME} PUBLIC
    ${PROJECT_COMPONENT_INCLUDE_DIRS}
  )
  target_sources(${PROJECT_COMPONENT_TARGET_NAME}
    PRIVATE FILE_SET local_headers TYPE HEADERS
    FILES ${PROJECT_COMPONENT_TARGET_ANY_LANG_IGNORE_FILES}
  )
  set_source_files_properties(${PROJECT_COMPONENT_TARGET_ASM_MASM_SOURCE_FILES}
    PROPERTIES LANGUAGE ASM_MASM
  )
  return(PROPAGATE PROJECT_COMPONENT_TARGET_NAME)
endfunction(add_file_glob_target)
